# Generated by Django 4.0.8 on 2022-11-02 01:21

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(blank=True, null=True, verbose_name="last login"),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(blank=True, max_length=150, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(blank=True, max_length=150, verbose_name="last name"),
                ),
                (
                    "email",
                    models.EmailField(blank=True, max_length=254, verbose_name="email address"),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "db_table": "auth_user",
                "abstract": False,
                "swappable": "AUTH_USER_MODEL",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="AnalyzedListing",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("zone", models.CharField(blank=True, max_length=20, null=True)),
                ("is_tpa", models.BooleanField(blank=True, null=True)),
                ("is_mf", models.BooleanField(blank=True, null=True)),
                ("salt", models.CharField(blank=True, max_length=20, null=True)),
                ("datetime_ran", models.DateTimeField(auto_now_add=True)),
                ("details", models.JSONField()),
                ("dev_scenarios", models.JSONField(blank=True, null=True)),
                ("input_parameters", models.JSONField()),
                ("geometry_details", models.JSONField()),
            ],
        ),
        migrations.CreateModel(
            name="BuildingOutlines",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("outline_id", models.FloatField()),
                ("bldgid", models.FloatField()),
                ("centroid_x", models.FloatField()),
                ("centroid_y", models.FloatField()),
                ("area", models.FloatField()),
                ("comment", models.CharField(blank=True, max_length=254, null=True)),
                ("shape_leng", models.FloatField()),
                ("shape_star", models.FloatField()),
                ("shape_stle", models.FloatField()),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
        ),
        migrations.CreateModel(
            name="HousingSolutionArea",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("tier", models.CharField(max_length=10)),
                ("allowance", models.CharField(max_length=150)),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
        ),
        migrations.CreateModel(
            name="Parcel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("apn", models.CharField(blank=True, max_length=10, null=True, unique=True)),
                ("apn_8", models.CharField(blank=True, max_length=8, null=True)),
                ("parcelid", models.BigIntegerField()),
                ("own_name1", models.CharField(blank=True, max_length=96, null=True)),
                ("own_name2", models.CharField(blank=True, max_length=50, null=True)),
                ("own_name3", models.CharField(blank=True, max_length=50, null=True)),
                ("fractint", models.FloatField()),
                ("own_addr1", models.CharField(blank=True, max_length=75, null=True)),
                ("own_addr2", models.CharField(blank=True, max_length=50, null=True)),
                ("own_addr3", models.CharField(blank=True, max_length=50, null=True)),
                ("own_addr4", models.CharField(blank=True, max_length=50, null=True)),
                ("own_zip", models.CharField(blank=True, max_length=9, null=True)),
                ("situs_juri", models.CharField(blank=True, max_length=2, null=True)),
                ("situs_stre", models.CharField(blank=True, max_length=30, null=True)),
                ("situs_suff", models.CharField(blank=True, max_length=4, null=True)),
                ("situs_post", models.CharField(blank=True, max_length=2, null=True)),
                ("situs_pre_field", models.CharField(blank=True, max_length=2, null=True)),
                ("situs_addr", models.BigIntegerField()),
                ("situs_frac", models.CharField(blank=True, max_length=3, null=True)),
                ("situs_buil", models.CharField(blank=True, max_length=4, null=True)),
                ("situs_suit", models.CharField(blank=True, max_length=6, null=True)),
                ("legldesc", models.CharField(blank=True, max_length=65, null=True)),
                ("asr_land", models.BigIntegerField()),
                ("asr_impr", models.BigIntegerField()),
                ("asr_total", models.BigIntegerField()),
                ("doctype", models.CharField(blank=True, max_length=1, null=True)),
                ("docnmbr", models.CharField(blank=True, max_length=6, null=True)),
                ("docdate", models.CharField(blank=True, max_length=8, null=True)),
                ("acreage", models.FloatField()),
                ("taxstat", models.CharField(blank=True, max_length=1, null=True)),
                ("ownerocc", models.CharField(blank=True, max_length=1, null=True)),
                ("tranum", models.CharField(blank=True, max_length=5, null=True)),
                ("asr_zone", models.IntegerField()),
                ("asr_landus", models.IntegerField()),
                ("unitqty", models.IntegerField()),
                ("submap", models.CharField(blank=True, max_length=11, null=True)),
                ("subname", models.CharField(blank=True, max_length=64, null=True)),
                ("nucleus_zo", models.CharField(blank=True, max_length=2, null=True)),
                ("nucleus_us", models.CharField(blank=True, max_length=3, null=True)),
                ("situs_comm", models.CharField(blank=True, max_length=28, null=True)),
                ("year_effec", models.CharField(blank=True, max_length=2, null=True)),
                ("total_lvg_field", models.BigIntegerField()),
                ("bedrooms", models.CharField(blank=True, max_length=3, null=True)),
                ("baths", models.CharField(blank=True, max_length=3, null=True)),
                ("addition_a", models.BigIntegerField()),
                ("garage_con", models.CharField(blank=True, max_length=1, null=True)),
                ("garage_sta", models.CharField(blank=True, max_length=3, null=True)),
                ("carport_st", models.CharField(blank=True, max_length=3, null=True)),
                ("pool", models.CharField(blank=True, max_length=1, null=True)),
                ("par_view", models.CharField(blank=True, max_length=1, null=True)),
                ("usable_sq_field", models.CharField(blank=True, max_length=5, null=True)),
                ("qual_class", models.CharField(blank=True, max_length=5, null=True)),
                ("nucleus_si", models.BigIntegerField()),
                ("nucleus_1", models.BigIntegerField()),
                ("nucleus_2", models.CharField(blank=True, max_length=3, null=True)),
                ("situs_zip", models.CharField(blank=True, max_length=10, null=True)),
                ("x_coord", models.FloatField()),
                ("y_coord", models.FloatField()),
                ("overlay_ju", models.CharField(max_length=2)),
                ("sub_type", models.IntegerField()),
                ("multi", models.CharField(blank=True, max_length=1, null=True)),
                ("shape_star", models.FloatField()),
                ("shape_stle", models.FloatField()),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.MultiPolygonField(
                        blank=True, null=True, srid=4326
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ParcelSlope",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("grade", models.IntegerField()),
                (
                    "polys",
                    django.contrib.gis.db.models.fields.MultiPolygonField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                ("run_date", models.DateField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="PropertyListing",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("price", models.IntegerField(blank=True, null=True)),
                ("addr", models.CharField(max_length=80)),
                ("neighborhood", models.CharField(blank=True, max_length=80, null=True)),
                ("zipcode", models.IntegerField(blank=True, null=True)),
                ("br", models.IntegerField(blank=True, null=True)),
                ("ba", models.IntegerField(blank=True, null=True)),
                ("founddate", models.DateTimeField(auto_now_add=True)),
                ("seendate", models.DateTimeField(auto_now=True)),
                ("mlsid", models.CharField(blank=True, max_length=20, null=True)),
                ("size", models.IntegerField(blank=True, null=True)),
                ("thumbnail", models.CharField(blank=True, max_length=200, null=True)),
                ("listing_url", models.CharField(blank=True, max_length=100, null=True)),
                ("soldprice", models.IntegerField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("PENDING", "Pending"),
                            ("SOLD", "Sold"),
                            ("MISSING", "Missing"),
                            ("WITHDRAWN", "Withdrawn"),
                            ("OFFMARKET", "Offmarket"),
                        ],
                        max_length=15,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RentalData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("location", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("details", models.JSONField()),
                ("br", models.IntegerField(blank=True, null=True)),
                ("ba", models.FloatField(blank=True, null=True)),
                ("sqft", models.IntegerField(blank=True, null=True)),
                (
                    "data_type",
                    models.CharField(
                        choices=[
                            ("URE", "Unit Rentometer Estimate"),
                            ("ARE", "Adu Rentometer Estimate"),
                            ("OVR", "Override"),
                        ],
                        max_length=5,
                    ),
                ),
                ("rundate", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="Roads",
            fields=[
                ("fnode", models.BigIntegerField()),
                ("tnode", models.BigIntegerField()),
                ("length", models.FloatField()),
                (
                    "roadsegid",
                    models.BigIntegerField(primary_key=True, serialize=False, unique=True),
                ),
                ("postid", models.CharField(max_length=20)),
                ("postdate", models.DateField()),
                ("roadid", models.BigIntegerField()),
                ("rightway", models.IntegerField()),
                ("addsegdt", models.DateField(blank=True, null=True)),
                ("segstat", models.CharField(blank=True, max_length=1, null=True)),
                ("dedstat", models.CharField(blank=True, max_length=1, null=True)),
                ("funclass", models.CharField(max_length=1)),
                ("oneway", models.CharField(blank=True, max_length=1, null=True)),
                ("subdivid", models.BigIntegerField()),
                ("segclass", models.CharField(max_length=1)),
                ("ljurisdic", models.CharField(blank=True, max_length=2, null=True)),
                ("llowaddr", models.BigIntegerField()),
                ("lhighaddr", models.BigIntegerField()),
                ("rjurisdic", models.CharField(blank=True, max_length=2, null=True)),
                ("rlowaddr", models.BigIntegerField()),
                ("rhighaddr", models.BigIntegerField()),
                ("lmixaddr", models.CharField(blank=True, max_length=1, null=True)),
                ("rmixaddr", models.CharField(blank=True, max_length=1, null=True)),
                ("pending", models.CharField(blank=True, max_length=1, null=True)),
                ("abloaddr", models.BigIntegerField()),
                ("abhiaddr", models.BigIntegerField()),
                ("nad83n", models.FloatField()),
                ("nad83e", models.FloatField()),
                ("speed", models.IntegerField()),
                ("l_zip", models.BigIntegerField()),
                ("r_zip", models.BigIntegerField()),
                ("lpsjur", models.CharField(blank=True, max_length=2, null=True)),
                ("rpsjur", models.CharField(blank=True, max_length=2, null=True)),
                ("carto", models.CharField(max_length=1)),
                ("obmh", models.CharField(blank=True, max_length=1, null=True)),
                ("firedriv", models.CharField(blank=True, max_length=1, null=True)),
                ("l_block", models.BigIntegerField()),
                ("r_block", models.BigIntegerField()),
                ("l_tract", models.BigIntegerField()),
                ("r_tract", models.BigIntegerField()),
                ("l_beat", models.IntegerField()),
                ("r_beat", models.IntegerField()),
                ("frxcoord", models.FloatField()),
                ("frycoord", models.FloatField()),
                ("midxcoord", models.FloatField()),
                ("midycoord", models.FloatField()),
                ("toxcoord", models.FloatField()),
                ("toycoord", models.FloatField()),
                ("f_level", models.IntegerField()),
                ("t_level", models.IntegerField()),
                ("l_psblock", models.BigIntegerField()),
                ("r_psblock", models.BigIntegerField()),
                ("rd20pred", models.CharField(blank=True, max_length=1, null=True)),
                ("rd20name", models.CharField(max_length=20)),
                ("rd20sfx", models.CharField(blank=True, max_length=2, null=True)),
                ("rd20full", models.CharField(max_length=25)),
                ("rd30pred", models.CharField(blank=True, max_length=2, null=True)),
                ("rd30name", models.CharField(max_length=30)),
                ("rd30sfx", models.CharField(blank=True, max_length=4, null=True)),
                ("rd30postd", models.CharField(blank=True, max_length=2, null=True)),
                ("rd30full", models.CharField(max_length=41)),
                ("shape_stle", models.FloatField()),
                ("geom", django.contrib.gis.db.models.fields.MultiLineStringField(srid=4326)),
            ],
        ),
        migrations.CreateModel(
            name="Topography",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("elev", models.FloatField()),
                ("ltype", models.IntegerField()),
                ("index_field", models.IntegerField()),
                ("shape_length", models.FloatField()),
                ("geom", django.contrib.gis.db.models.fields.MultiLineStringField(srid=4326)),
            ],
        ),
        migrations.CreateModel(
            name="TopographyLoads",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("fname", models.CharField(max_length=200, verbose_name="filename")),
                (
                    "extents",
                    django.contrib.gis.db.models.fields.PolygonField(srid=4326, unique=True),
                ),
                ("run_date", models.DateField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="TransitPriorityArea",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(max_length=30)),
                ("shape_star", models.FloatField()),
                ("shape_stle", models.FloatField()),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
        ),
        migrations.CreateModel(
            name="ZoningBase",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("zone_name", models.CharField(max_length=20)),
                ("imp_date", models.DateField()),
                ("ordnum", models.CharField(max_length=10)),
                ("shape_star", models.FloatField()),
                ("shape_stle", models.FloatField()),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
        ),
        migrations.CreateModel(
            name="AnalyzedParcel",
            fields=[
                (
                    "apn",
                    models.OneToOneField(
                        max_length=10,
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="world.parcel",
                    ),
                ),
                (
                    "ab2011_eligible",
                    models.CharField(
                        choices=[
                            ("passed", "passed"),
                            ("assumed_pass", "assumed_pass"),
                            ("likely_passed", "likely_passed"),
                            ("not_run", "not_run"),
                            ("uncertain", "uncertain"),
                            ("likely_failed", "likely_failed"),
                            ("failed", "failed"),
                            ("error", "error"),
                        ],
                        max_length=20,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AnalyzedRoad",
            fields=[
                (
                    "status",
                    models.IntegerField(
                        choices=[
                            (0, "Ok"),
                            (1, "Too Short"),
                            (2, "Inside Parcel"),
                            (3, "Crosses Parcel"),
                            (4, "No Widths"),
                            (5, "Unstable Widths"),
                            (6, "Exception"),
                        ],
                        default=0,
                    ),
                ),
                (
                    "road",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="world.roads",
                    ),
                ),
                ("low_width", models.FloatField(null=True)),
                ("avg_width", models.FloatField(null=True)),
                ("high_width", models.FloatField(null=True)),
                ("stdev_width", models.FloatField(null=True)),
                (
                    "all_widths",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.FloatField(), null=True, size=None
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ZoningMapLabel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("text", models.CharField(max_length=20)),
                ("geom", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                (
                    "model",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="world.zoningbase"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TpaMapLabel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("text", models.CharField(max_length=20)),
                ("geom", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                (
                    "model",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="world.transitpriorityarea"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddIndex(
            model_name="roads",
            index=models.Index(
                fields=["rd30pred", "rd30name", "rd30sfx", "abloaddr", "abhiaddr"],
                name="world_roads_rd30pre_760242_idx",
            ),
        ),
        migrations.AddField(
            model_name="rentaldata",
            name="parcel",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="world.parcel", to_field="apn"
            ),
        ),
        migrations.AddField(
            model_name="propertylisting",
            name="parcel",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="world.parcel",
                to_field="apn",
            ),
        ),
        migrations.AddField(
            model_name="propertylisting",
            name="prev_listing",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="next_listing",
                to="world.propertylisting",
            ),
        ),
        migrations.AddField(
            model_name="parcelslope",
            name="parcel",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="world.parcel", to_field="apn"
            ),
        ),
        migrations.AddIndex(
            model_name="parcel",
            index=models.Index(fields=["apn"], name="world_parce_apn_d58599_idx"),
        ),
        migrations.AddIndex(
            model_name="parcel",
            index=models.Index(fields=["situs_addr"], name="world_parce_situs_a_92695e_idx"),
        ),
        migrations.AddField(
            model_name="analyzedlisting",
            name="listing",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to="world.propertylisting"
            ),
        ),
        migrations.AddField(
            model_name="analyzedlisting",
            name="parcel",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="world.parcel", to_field="apn"
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="auth.group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.AddIndex(
            model_name="propertylisting",
            index=models.Index(fields=["zipcode"], name="world_prope_zipcode_16206f_idx"),
        ),
        migrations.AddIndex(
            model_name="propertylisting",
            index=models.Index(fields=["mlsid"], name="world_prope_mlsid_ab7a1f_idx"),
        ),
        migrations.AddIndex(
            model_name="propertylisting",
            index=models.Index(fields=["parcel"], name="world_prope_parcel__d2082d_idx"),
        ),
        migrations.AddConstraint(
            model_name="parcelslope",
            constraint=models.UniqueConstraint(
                fields=("parcel", "grade"), name="unique_parcel_grade_bucket"
            ),
        ),
        migrations.AddIndex(
            model_name="analyzedroad",
            index=models.Index(fields=["low_width"], name="world_analy_low_wid_594aa5_idx"),
        ),
        migrations.AddIndex(
            model_name="analyzedroad",
            index=models.Index(fields=["avg_width"], name="world_analy_avg_wid_834c34_idx"),
        ),
        migrations.AddIndex(
            model_name="analyzedroad",
            index=models.Index(fields=["high_width"], name="world_analy_high_wi_0ad793_idx"),
        ),
        migrations.AddIndex(
            model_name="analyzedparcel",
            index=models.Index(fields=["apn"], name="world_analy_apn_id_2df48e_idx"),
        ),
        migrations.AddIndex(
            model_name="analyzedparcel",
            index=models.Index(fields=["ab2011_eligible"], name="world_analy_ab2011__8d541f_idx"),
        ),
    ]
