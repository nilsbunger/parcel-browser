# Generated by Django 4.0.5 on 2022-08-15 21:57
from collections import defaultdict
import datetime
from django.db import migrations


def move_analyzed_listing_to_fields(apps, schema_editor):
    # We can't import the Person model directly as it may be a newer
    # version than this migration expects. We use the historical version.
    AnalyzedListing = apps.get_model('world', 'AnalyzedListing')
    Parcel = apps.get_model('world', 'Parcel')
    res = AnalyzedListing.objects.order_by('listing_id', '-datetime_ran')
    curr_listing_id = -999
    stats = defaultdict(int)
    for al in res:
        if al.listing_id != curr_listing_id:
            # new listing. keep this one, and move details to the main entry.
            curr_listing_id = al.listing_id
            curr_listing_datetime = al.datetime_ran
            if al.parcel:
                stats['previously_updated'] += 1
                continue
            try:
                al.is_tpa = al.details.pop('is_tpa')
            except KeyError:
                if al.datetime_ran < datetime.datetime(2022, 8, 9, tzinfo=datetime.timezone.utc):
                    # this was before we had TPA information.
                    al.is_tpa = None
                    al.details['outdated_analysis'] = True
                    stats['outdated_analysis'] += 1
                else:
                    print (f"!!No TPA info for listing {al.listing_id} from {al.datetime_ran}")
                    continue
                    raise Exception

            al.parcel = Parcel.objects.get(apn=al.details.pop('apn'))
            al.zone = al.details.pop('zone')
            try:
                al.save()
            except Exception as e:
                print (f"Exception {e}")
            # print (f"\n\nKeeping entry for listing {al.listing_id} from {al.datetime_ran}")
            stats['updated'] += 1
        else:
            # duplicate listing ... remove!
            assert (al.datetime_ran < curr_listing_datetime)
            assert ('salt' not in al.details)
            # print (f"Deleting entry for listing {al.listing_id} from {al.datetime_ran}")
            stats['deleted'] += 1
            al.delete()
    print (f"Done. Final stats on AnalyzedListings migration and uniquify: \n{stats.items()}")

class Migration(migrations.Migration):
    atomic = False

    dependencies = [
        ('world', '0050_analyzedlisting_is_tpa_analyzedlisting_parcel_and_more'),
    ]

    operations = [
        migrations.RunPython(move_analyzed_listing_to_fields)
    ]
