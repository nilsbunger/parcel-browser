"""
Django settings for mygeo project.

Generated by 'django-admin startproject' using Django 4.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import datetime
import os
import os
from pathlib import Path
import sys

from django.core.exceptions import ImproperlyConfigured
import environ
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
from whitenoise import WhiteNoise

from mygeo.util import eprint

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
FRONTEND_DIR = BASE_DIR.parent / "frontend"

executable_name = os.path.basename(sys.argv[0])

### CORE configuration variables
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))
env = environ.Env(
    LOCAL_DB=(bool, False),
    TEST_ENV=(bool, False),  # Running tests; disables silk and other dev infra
    BUILD_PHASE=(str, "False"),  ## TODO: this should be switchable to a boolean
    DJANGO_LOG_LEVEL=(str, "INFO"),
    DJANGO_ENV=(str, "production"),
    SENTRY_DSN=(str, None),
    CLOUDFLARE_R2_ENABLED=(bool, True),
)
BUILD_PHASE = env("BUILD_PHASE") == "True"
DJANGO_ENV = env("DJANGO_ENV")
LOCAL_DB = env("LOCAL_DB")
TEST_ENV = env("TEST_ENV")
DJANGO_LOG_LEVEL = env("DJANGO_LOG_LEVEL")
eprint("Django Log Level", DJANGO_LOG_LEVEL)
DEV_ENV = DJANGO_ENV == "development"  # running on local machine
PROD_ENV = DJANGO_ENV == "production"  # running on production server
TEST_ENV |= executable_name in ["pytest", "_jb_pytest_runner.py"]
TOPO_DB_ALIAS = "local_db" if DEV_ENV else "default"
CLOUDFLARE_R2_ENABLED = env("CLOUDFLARE_R2_ENABLED") and not TEST_ENV

# DEBUG variable - controls display of error messages, static file handling, etc. Never use it in production!
DEBUG = DEV_ENV and not TEST_ENV
# NOTE: DEBUG is set to false within tests regardless of the value of DEBUG here.

eprint(f"**** {'INSECURE (DEV) ENVIRONMENT' if DEV_ENV else 'PRODUCTION ENVIRONMENT'} ****")
if TEST_ENV:
    eprint(f"**** TEST ENVIRONMENT ****")
eprint(f"**** DEBUG == {DEBUG} ****")
# if not BUILD_PHASE:
#     AUTH0_DOMAIN = env("AUTH0_DOMAIN")
#     AUTH0_CLIENT_ID = env("AUTH0_CLIENT_ID")
#     AUTH0_CLIENT_SECRET = env("AUTH0_CLIENT_SECRET")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
if PROD_ENV and not BUILD_PHASE and not TEST_ENV:
    SECRET_KEY = env("DJANGO_SECRET_KEY")
    INSECURE = False
else:
    eprint(f"**** USING INSECURE DEV-ENVIRONMENT SECRET ****")
    SECRET_KEY = 'django-insecure--.=O/3?A`qp>-K5{m$6KOgNH8$72m!FwO"vO&k<V+m`ZhJ)_#]A9iXB]o}l8&)'
    INSECURE = True
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True
SESSION_COOKIE_AGE = 1209600  # DEFAULT SESSION AGE OF 2 WEEKS

ALLOWED_HOSTS = ["localhost", "127.0.0.1", "parsnip.fly.dev"]

AUTH_USER_MODEL = "userflows.User"

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by e-mail
    # "allauth.account.auth_backends.AuthenticationBackend",
]
# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "whitenoise.runserver_nostatic",
    "django.contrib.staticfiles",
    # "django.contrib.sites",   # seems to disable site switching for django-allauth?
    "django_extensions",
    "django.contrib.gis",
    ## For django-two-factor-auth package:
    # "django_otp",
    # "django_otp.plugins.otp_static",
    # "django_otp.plugins.otp_totp",
    # # 'django_otp.plugins.otp_email',  # <- if you want email as a second factor (kinda weird)
    # "two_factor",
    # "two_factor.plugins.phonenumber",  # <- if you want phone number capability.
    # # 'two_factor.plugins.email',  # <- if you want email as a second factor (kinda weird).
    # "two_factor.plugins.yubikey",  # <- for yubikey capability.
    ## END for django-two-factor-auth package
    ## For django-allauth package:
    # "allauth",
    # "allauth.account",
    # "allauth.socialaccount",
    # "allauth.socialaccount.providers.amazon_cognito",
    #   'allauth.socialaccount.providers.google',   ## many more social auth providers available
    ## END for django-allauth package
    "world",
    "co",
    "userflows",
    "elt",
]

# silk profiler
ENABLE_SILK = DEV_ENV and not TEST_ENV

if ENABLE_SILK:
    INSTALLED_APPS += ["silk"]

# django-allauth requires using django sites
SITE_ID = 1

# Provider specific settings
SOCIALACCOUNT_PROVIDERS = {
    # "amazon_cognito": {
    #     "DOMAIN": "https://parsnip.auth.us-west-2.amazoncognito.com",
    # }
    # 'google': {
    #     # For each OAuth based provider, either add a ``SocialApp``
    #     # (``socialaccount`` app) containing the required client
    #     # credentials, or list them here:
    #     'APP': {
    #         'client_id': '123',
    #         'secret': '456',
    #         'key': ''
    #     }
    # }
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    ## Keep Whitenoise above all middleware except SecurityMiddleware
    "world.infra.MyWhiteNoiseMiddleware",
    # ----------------------------------------------------------------------------
    ## UpdateCacheMiddleware needs to appear ABOVE anythning else that adds to the Vary header, like SessionMiddleware,
    ##    GzipMiddleware, LocaleMiddleware, etc.
    ## Note: cache middleware shouldn't be needed unless you're doing site-level caching.
    ## Note: if we use this, we should use our H3CacheMiddleware instead, so we cache empty results.
    # 'django.middleware.cache.UpdateCacheMiddleware',
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    ## FetchFromCacheMiddleware needs to appear BELOW anything else that adds to the Vary header.
    ## Note: cache middleware shouldn't be needed unless you're doing site-level caching
    # 'django.middleware.cache.FetchFromCacheMiddleware',
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    ## For django-two-factor-auth package: - must be after AuthenticationMiddleware
    # "django_otp.middleware.OTPMiddleware",
    ## END for django-two-factor-auth package
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# Add silk profiler right after security middleware.
if ENABLE_SILK:
    MIDDLEWARE.insert(1, "silk.middleware.SilkyMiddleware")

ROOT_URLCONF = "mygeo.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "dist/django-templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "mygeo.wsgi.application"

try:
    GDAL_LIBRARY_PATH = env("GDAL_LIBRARY_PATH")
    eprint("Using GDAL Library path from environment var:", GDAL_LIBRARY_PATH)
    GEOS_LIBRARY_PATH = env("GEOS_LIBRARY_PATH")
    eprint("Using GEOS Library path from environment var:", GEOS_LIBRARY_PATH)
except ImproperlyConfigured as e:
    pass

# We get X-Forwarded-Proto from the web hosting proxy (eg fly.io); tell Django
# should trust that to determine the protocol used.
# See also https://docs.djangoproject.com/en/4.0/ref/settings/#secure-proxy-ssl-header
# and https://fly.io/docs/reference/runtime-environment/
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Silk profiler
SILKY_AUTHENTICATION = True  # User must login
SILKY_AUTHORISATION = True  # User must have permissions
SILKY_PYTHON_PROFILER = True

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases
dbHost = None
dbPassword = None
local_db_settings = ("127.0.0.1", "parsnip", "postgres", "password")
if LOCAL_DB:
    eprint("**** LOCAL DATABASE ****")
    (dbHost, dbName, dbUserName, dbPassword) = local_db_settings

elif BUILD_PHASE:
    eprint("**** NO DB - BUILD PHASE ****")
    (dbHost, dbName, dbUserName, dbPassword) = ("", "", "", "")
else:
    eprint("**** CLOUD DATABASE ****")
    (dbHost, dbName, dbUserName, dbPassword) = (
        env("DB_HOST"),
        env("DB_NAME"),
        env("DB_USERNAME"),
        env("DB_PASSWORD"),
    )

if BUILD_PHASE:
    DATABASES = {}
else:
    # Define the 'default' DB where most reads and writes go. This could be a local or cloud DB.
    # Additionally define the 'topo' DB where the topo model lives, since it is very large.
    # The 'topo' DB is set up as a local DB, which is useful if we're running our scraping locally on a computer,
    # but with the cloud DB.
    ...
    DATABASES = {
        "default": {
            "ENGINE": "django.contrib.gis.db.backends.postgis",
            "HOST": dbHost,
            "NAME": dbName,
            "USER": dbUserName,
            "PASSWORD": dbPassword,
            "PORT": 5432,
        },
    }

    DATABASES["basedata"] = DATABASES["default"].copy()
    DATABASES["basedata"]["TEST"] = {"MIRROR": "default"}

    if DEV_ENV:
        # Running locally, base data can come from local machine, even if we're using cloud DB for other data
        DATABASES["basedata"] = {
            "ENGINE": "django.contrib.gis.db.backends.postgis",
            "HOST": local_db_settings[0],
            "NAME": local_db_settings[1],
            "USER": local_db_settings[2],
            "PASSWORD": local_db_settings[3],
            "TEST": {
                "MIRROR": "default",
            },
        }
        DATABASES["local_db"] = DATABASES["basedata"].copy()

        # Add in explicit reference to cloud_db, used by some scripts that should only run in one environment
        DATABASES["cloud_db"] = DATABASES["default"].copy()
        DATABASES["cloud_db"]["TEST"] = {"MIRROR": "default"}

CONN_MAX_AGE = None  # allow persistent DB connection forever

if DEV_ENV:
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
else:
    EMAIL_BACKEND = "world.infra.MailerSendBackend"

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 8,
        },
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Authentication config
# LOGIN_URL = "/dj/all-auth/accounts/login/"
# LOGIN_REDIRECT_URL = "/listings/"
# LOGIN_URL = "two_factor:login"
LOGIN_URL = "/login"
LOGIN_REDIRECT_URL = "two_factor:profile"

LOGOUT_REDIRECT_URL = "/"
# # Authentication -- django-allauth config
# ACCOUNT_EMAIL_VERIFICATION = "mandatory"
# ACCOUNT_DEFAULT_HTTP_PROTOCOL = "https"
# ACCOUNT_MAX_EMAIL_ADDRESSES = 2

# Authentication -- set up django-allauth to use email as username:
# ACCOUNT_USER_MODEL_USERNAME_FIELD = None  # using email as username
# ACCOUNT_EMAIL_REQUIRED = True
# ACCOUNT_USERNAME_REQUIRED = False
# ACCOUNT_AUTHENTICATION_METHOD = "email"

# # Authentication -- django-two-factor-auth config
# TWO_FACTOR_PATCH_ADMIN = True
# TWO_FACTOR_REMEMBER_COOKIE_AGE = 60 * 60 * 24 * 30  # 30 days
# TWO_FACTOR_REMEMBER_COOKIE_SECURE = True
# TWO_FACTOR_REMEMBER_COOKIE_SAMESITE = "Strict"
# TWO_FACTOR_SMS_GATEWAY = (
#     "two_factor.gateways.fake.Fake" if DEV_ENV else "two_factor.gateways.twilio.gateway.Twilio"
# )
# PHONENUMBER_DEFAULT_REGION = "US"

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "/static/"

# Where static files are collected to (eg by "python manage.py collectstatic")
STATIC_ROOT = BASE_DIR / "dist/static/"

# STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]

# Static files storage.
if TEST_ENV:
    # Don't use manifest storage in testing, as per https://docs.djangoproject.com/en/4.1/ref/contrib/staticfiles/
    STATICFILES_STORAGE = "django.contrib.staticfiles.storage.StaticFilesStorage"
else:
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
# WHITENOISE_INDEX_FILE = "index.html"

# Absolute path to a directory of files which will be served at the root of your application
# Useful for files like robots.txt or favicon.ico which you want to serve at a specific URL
WHITENOISE_ROOT = BASE_DIR / "dist/static"

# Set caching for static files. Technically we shouldn't need to do this, because whitenoise should automatically
# detect files with a hash in their name and cache them forever. But it doesn't detect that hash for files created
# by the parcel build process, so we need to set it explicitly. A
WHITENOISE_MAX_AGE = WhiteNoise.FOREVER

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Sentry error monitoring (don't use on localhost)
if not DEV_ENV and not TEST_ENV:
    sentry_sdk.init(
        dsn=env("SENTRY_DSN"),
        integrations=[
            DjangoIntegration(),
        ],
        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for performance monitoring.
        # We recommend adjusting this value in production.
        traces_sample_rate=1.0,
        # If you wish to associate users to errors (assuming you are using
        # django.contrib.auth) you may enable sending PII data.
        send_default_pii=True,
    )

LOGGING_CONFIG = "logging.config.dictConfig"

LOG_DIR = f"./log/{datetime.datetime.now():%y-%m-%d}"
os.makedirs(LOG_DIR, exist_ok=True)
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{asctime:.19} [{name}] {levelname}: {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": f"{LOG_DIR}/{datetime.datetime.now():%y-%m-%d-%H%M}-debug.log",
            "formatter": "verbose",
        },
    },
    "root": {
        "handlers": ["console", "file"],
        "level": "INFO",
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": DJANGO_LOG_LEVEL,
            "propagate": False,
        },
        "django.utils.autoreload": {"level": "INFO"},
        "django.db.backends": {
            "level": "INFO",
        },
        "django.server": {
            "handlers": ["console"],
            "level": DJANGO_LOG_LEVEL,
            "propagate": False,
        },
        "two_factor": {
            "handlers": ["console"],
            "level": "INFO",
        },
        "parsnip.commands": {
            "handlers": ["console", "file"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}

# Set up caching to cache the tile views which contain high-cost SQL queries
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.filebased.FileBasedCache",
        "LOCATION": "/parsnip_data/django-cache"
        if (PROD_ENV and not TEST_ENV and not LOCAL_DB)
        else BASE_DIR / ".django-cache",
        "OPTIONS": {"MAX_ENTRIES": 10000, "CULL_FREQUENCY": 4},  # Cull 1/4th of entries when we hit max-entries
    }
}
