"""
Django settings for mygeo project.

Generated by 'django-admin startproject' using Django 4.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import datetime
import os
from pathlib import Path
import sys

import environ

import os
from mygeo.util import eprint

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

FRONTEND_DIR = BASE_DIR.parent / 'frontend'

environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# SECURITY WARNING: don't run with debug turned on in production!
env = environ.Env(
    LOCAL_DB=(bool, False),
    BUILD_PHASE=(str, "False"),
    DESPERATE=(bool, False),
)

# if totally desperate we can print out all the environment variables for debugging Docker stuff.
if env('DESPERATE'):
    eprint ("*** START ENVIRONMENT VARIABLES ***")
    for name, value in os.environ.items():
        eprint("{0}: {1}".format(name, value))
    eprint ("*** END ENVIRONMENT VARIABLES ***")

DJANGO_ENV = env('DJANGO_ENV')
DEV_ENV = DJANGO_ENV == 'development'
DEBUG = DJANGO_ENV == 'development'

LOCAL_DB = env('LOCAL_DB')
if DEBUG:
    eprint("**** RUNNING IN (insecure) DEVELOPMENT MODE ****")
else:
    eprint("**** DEBUG=FALSE ****")
eprint(f"**** DJANGO_ENV is {'DEV (meaning on a local machine)' if DEV_ENV else 'PROD'} ****")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure--.=O/3?A`qp>-K5{m$6KOgNH8$72m!FwO"vO&k<V+m`ZhJ)_#]A9iXB]o}l8&)'
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'parsnip.fly.dev']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    "whitenoise.runserver_nostatic",
    'django.contrib.staticfiles',
    'django_extensions',
    'django.contrib.gis',
    "rest_framework",
    # "rest_framework_gis",
    'world',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # Keep Whitenoise above all middleware except SecurityMiddleware
    "whitenoise.middleware.WhiteNoiseMiddleware",
    # ----------------------------------------------------------------------------
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # UNSAFE: Uncomment this out later. Post requests don't work with this turned on
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mygeo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'dist/django-templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mygeo.wsgi.application'

try:
    GDAL_LIBRARY_PATH = env('GDAL_LIBRARY_PATH')
    GEOS_LIBRARY_PATH = env('GEOS_LIBRARY_PATH')
except:
    pass

# We get X-Forwarded-Proto from the web hosting proxy (eg fly.io); tell Django
# should trust that to determine the protocol used.
# See also https://docs.djangoproject.com/en/4.0/ref/settings/#secure-proxy-ssl-header
# and https://fly.io/docs/reference/runtime-environment/
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases
dbHost = None
if LOCAL_DB:
    eprint("****** LOCAL DATABASE ******")
    (dbHost, dbName, dbUserName, dbPassword) = (
        'localhost', 'geodjango', env('USER'), '')
elif env('BUILD_PHASE') == 'True':
    eprint("****** NO DB - BUILD PHASE ******")
else:
    eprint("****** CLOUD DATABASE ******")
    (dbHost, dbName, dbUserName, dbPassword) = (env('DB_HOST'),
                                                env('DB_NAME'), env('DB_USERNAME'), env('DB_PASSWORD'))

if dbHost:
    # Define the 'default' DB where most reads and writes go. This could be a local or cloud DB.
    # Additionally define the 'topo' DB where the topo model lives, since it is very large.
    # The 'topo' DB is set up as a local DB, which is useful if we're running our scraping locally on a computer,
    # but with the cloud DB.
    DATABASES = {
        'default': {
            'ENGINE': 'django.contrib.gis.db.backends.postgis',
            'HOST': dbHost,
            'NAME': dbName,
            'USER': dbUserName,
            'PASSWORD': dbPassword,
        }
    }
    if DEV_ENV:
        # Topo DB is only available when running in a dev environment, since it requires a local computer.
        DATABASES['local_db'] = {
            'ENGINE': 'django.contrib.gis.db.backends.postgis',
            'HOST': 'localhost',
            'NAME': 'geodjango',
            'USER': env('USER'),
            'PASSWORD': '',
        }
        # Add in explicit reference to cloud_db, used by some scripts that should only run in one environment
        DATABASES['cloud_db'] = {
            'ENGINE': 'django.contrib.gis.db.backends.postgis',
            'HOST': dbHost,
            'NAME': dbName,
            'USER': dbUserName,
            'PASSWORD': dbPassword,
        }

else:
    DATABASES = {}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOGIN_URL = '/dj/accounts/login/'
LOGIN_REDIRECT_URL = '/listings/'

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'dist/static/'
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
# WHITENOISE_INDEX_FILE = "index.html"
WHITENOISE_ROOT = BASE_DIR / 'dist/static'


# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING_CONFIG = 'logging.config.dictConfig'

LOG_DIR = f'./log/{datetime.datetime.now():%y-%m-%d}'
os.makedirs(LOG_DIR, exist_ok=True)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{asctime:.19} [{name}] {levelname}: {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': f'{LOG_DIR}/{datetime.datetime.now():%y-%m-%d-%H%M}-debug.log',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'WARNING',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
        'parsnip.commands': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,

        }
    },
}
