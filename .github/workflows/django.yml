name: Django CI

on: [push, pull_request]
#  push:
#    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-20.04
    strategy:
      max-parallel: 4
      matrix:
        python-version: [ 3.9 ]
        pg-major: [ 14 ]
        postgis-major: [ 3 ]
        postgis-version: [ 3.3.2+dfsg-1.pgdg20.04+1 ]

    services:
      postgres:
        image: postgis/postgis:14-3.3   # versions available: https://registry.hub.docker.com/r/postgis/postgis/
        env:
          # must specify password for PG Docker container image, see: https://registry.hub.docker.com/_/postgres?tab=description&page=1&name=10
          POSTGRES_PASSWORD: runner
          POSTGRES_DB: postgres
        ports:
            - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Install poetry and make virtualenvs live under the project directory (in .venv/) ...
      - name: Install Poetry
        run: |
          python -m pip install poetry==1.3.1
          python -m poetry config settings.virtualenvs.path ~/.virtualenvs
        #          pipx install poetry


      - name: Install apt dependencies
        run: |
          sudo apt-get install --no-install-recommends -y gdal-bin=3.0.4+dfsg-1build3 libgdal-dev=3.0.4+dfsg-1build3
        # sudo apt-get update --no-install-recommends
#          sudo apt-get install -y --no-install-recommends \
#             postgresql-${{ matrix.pg-major }}-postgis-${{ matrix.postgis-major }}=${{ matrix.postgis-version }} \
#             postgresql-${{ matrix.pg-major }}-postgis-${{ matrix.postgis-major }}-scripts

      - name: Cache virtualenv
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: ~/.virtualenvs
          key: poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Install virtualenv dependencies
        run: python -m poetry install --only main,test --no-root --no-interaction --no-ansi
        if: steps.cache-deps.outputs.cache-hit != 'true'

#      - name: Start PostgreSQL
#        run: |
#          sudo systemctl start postgresql.service
#          sudo -u postgres createuser -s runner
#          sudo -u postgres psql -c "ALTER USER runner WITH PASSWORD 'runner';"

      - name: Collect static and run tests
        env:
          DB_HOST: localhost
          DB_NAME: postgres
          DB_USERNAME: postgres
          DB_PASSWORD: runner
          TEST_ENV: true
        run: |
          python -m poetry run python manage.py collectstatic --noinput
          python -m poetry run python -m pytest -s
